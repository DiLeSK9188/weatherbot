# Version for github
import locale
import random
from datetime import timedelta
import pyowm  # https://github.com/csparpa/pyowm
import telebot
from telebot import types
import config
from t import gr as rr
from pyowm.utils.config import get_default_config
from wapi import W_API

config_dict = get_default_config()
config_dict['language'] = 'ru'  # your language here
print(rr.greeting)
bot = telebot.TeleBot(config.TOKEN)  # telegram bot API
owm = pyowm.OWM(config.APIkey_owm, config_dict)  # –ø–æ–≥–æ–¥–Ω—ã–π API open weather map
locale.setlocale(locale.LC_ALL, "ru")
gmt0gmt2_delta = timedelta(hours=2)  # GMT+2
gmt0gmt3_delta = timedelta(hours=3)  # GMT+3


# COMMANDS MESSAGE HANDLER
@bot.message_handler(commands=['start', 'refresh'])  # Decorator.
def commands_handler(message):
    # Keyboard SIMPLE
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ù–µ–±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏, –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.)
    item1 = types.KeyboardButton('üî¥ –∫–Ω–æ–ø–∫–∞ 1')
    item2 = types.KeyboardButton('üîµ –∫–Ω–æ–ø–∫–∞ 2')
    item3 = types.KeyboardButton('üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ')
    item4 = types.KeyboardButton('üîô –Ω–∞–∑–∞–¥')
    item5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞')
    markup.add(item1, item2, item3, item4, item5)
    if message.text == '/refresh':  # Condition for command '/refresh'
        sti_ok = open('ok.webp', 'rb')
        bot.send_sticker(message.chat.id, sti_ok)
        sti_ok.close()
        bot.send_message(message.chat.id, '–∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã üòÄ', reply_markup=markup)
        return  # exit from the decorated function after this condition.
    # ------------------------------------------
    sti = open('sticker.webp', 'rb')  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞ 'rb' - —á—Ç–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    bot.send_sticker(message.chat.id, sti); sti.close()
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!', reply_markup=markup)
    print(bot.get_updates())


# ----------------------------------------TEXT MESSAGE HANDLER------------------------------------------------
@bot.message_handler(content_types=['text'])
def text_handler(message):
    text = message.text

    def catch_town(message):

        try:
            keyboard_next = types.InlineKeyboardMarkup()
            b1 = types.InlineKeyboardButton('–ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data=f'nextd,{message.text}')
            b2 = types.InlineKeyboardButton('–ø–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π', callback_data=f'week,{message.text}')
            wapi = W_API(message.text, owm, gmt=gmt0gmt3_delta, )
            w_now = wapi.weather_now()
            keyboard_next.add(b1, b2)
            bot.reply_to(message, w_now)
            bot.send_message(message.chat.id, '–ù–∞ –∫–æ–≥–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑? ', reply_markup=keyboard_next)
        except Exception as e:
            bot.reply_to(message,
                         f'–û–πüò∞, –ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê\n–∏–ª–∏  –≥–æ—Ä–æ–¥–∞/—Å—Ç—Ä–∞–Ω—ã –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text}, '
                         f'–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –≤ –±–∞–∑–µ.'
                         f' –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É –≤ –ö–∏–µ–≤–µ:  \n{W_API("–ö–∏–µ–≤", owm,  gmt=gmt0gmt3_delta).weather_now()}')

    if text == "–ü–æ–≥–æ–¥–∞":
        msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥')
        bot.register_next_step_handler(msg, catch_town)
        return
    elif text == 'pythonprogrammer':
        # Inline keyboard (ADMIN)
        markup2 = types.InlineKeyboardMarkup(row_width=2)  # —Ä–∞–∑–º–µ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
        i_button1 = types.InlineKeyboardButton('üíéAPI telegramüíé',
                                               'https://core.telegram.org/bots/api#inlinekeyboardmarkup')  # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞
        i_button2 = types.InlineKeyboardButton('üß™pyTelegramBotAPI‚öô',
                                               'https://github.com/eternnoir/pyTelegramBotAPI#types')
        i_button3 = types.InlineKeyboardButton('CallBack button', callback_data='123')
        markup2.add(i_button1, i_button2, i_button3)
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, '*–≠—Ç–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞:*',
                         reply_markup=markup2, parse_mode='Markdown')
        return

    elif text == 'üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ':
        bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ```{random.randint(0, 1000)}```",
                         parse_mode='Markdown')
        return
    elif text == 'üîô –Ω–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã [/]',
                         reply_markup=types.ReplyKeyboardRemove())
        return
    elif message.chat.type == 'private':
        if text == 'üî¥ –∫–Ω–æ–ø–∫–∞ 1':
            bot.send_message(message.chat.id, '–≠—Ç–æ –∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞!')
            # return
        elif text == 'üîµ –∫–Ω–æ–ø–∫–∞ 2':
            bot.send_message(message.chat.id, '–≠—Ç–æ —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞!')
            # return
        else:
            sti = open('pum.webp', 'rb')
            bot.send_sticker(message.chat.id, sti); sti.close()
            bot.send_message(message.chat.id, '\n–ß–µ–ª–æ–≤–µ–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª! –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏  /refresh  –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
            bot.reply_to(message, f'{message.text}?...')
            (ch_id, str_msg) = (-1001253711693, f'@{message.chat.username}\n {message.chat.first_name} \nsay: {message.text}')
            bot.send_message(ch_id, str_msg, disable_notification=True)


# --------------------------------CALLBACK HANDLER-------------------------------------------------------------
@bot.callback_query_handler(func=lambda call: True, )
def callback_inline(call):
    try:
        if call.message:
            if call.data == '123':
                bot.send_message(call.message.chat.id, '`Some result \n...`', parse_mode='markdown')
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üÜó',
                                      reply_markup=None)
                bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text='ALERT!!!', )
                return

            elif call.data.split(',')[0] == 'nextd':  # –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ–≥–æ–¥–∞
                forecast = W_API(call.data.split(',')[1], owm,  gmt=gmt0gmt3_delta)
                forecast.weather_fc_init()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                bot.send_message(call.message.chat.id, forecast.weather_tomorrow())

            elif call.data.split(',')[0] == 'week':  # –ù–∞ –ø—è—Ç—å –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                forecast_5 = W_API(call.data.split(',')[1], owm,  gmt=gmt0gmt3_delta)
                forecast_5.weather_fc_init()
                bot.send_message(call.message.chat.id, forecast_5.next_days())
    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
# f'{message.first_name}: \n{message.text}'
